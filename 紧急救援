/*作为一个城市的应急救援队伍的负责人，你有一张特殊的全国地图。在地图上显示有多个分散的城市和一些连接城市的快速道路。每个城市的救援队数量和每一条连接两个城市的快速道路长度都标在地图上。当其他城市有紧急求助电话给你的时候，你的任务是带领你的救援队尽快赶往事发地，同时，一路上召集尽可能多的救援队。
输入格式:
输入第一行给出4个正整数N、M、S、D，其中N（2≤N≤500）是城市的个数，顺便假设城市的编号为0 ~ (N−1)；M是快速道路的条数；S是出发地的城市编号；D是目的地的城市编号。
第二行给出N个正整数，其中第i个数是第i个城市的救援队的数目，数字间以空格分隔。随后的M行中，每行给出一条快速道路的信息，分别是：城市1、城市2、快速道路的长度，中间用空格分开，数字均为整数且不超过500。输入保证救援可行且最优解唯一。
输出格式:
第一行输出最短路径的条数和能够召集的最多的救援队数量。第二行输出从S到D的路径中经过的城市编号。数字间以空格分隔，输出结尾不能有多余空格。
输入样例:
4 5 0 3
20 30 40 10
0 1 1
1 3 2
0 3 3
0 2 2
2 3 2
输出样例:
2 60
0 1 3

//dijkstra 模板中加了救援队的判断条件  加上路径输出
*/

#include <bits/stdc++.h>
#define INF 0x3f3f3f3f
using namespace std;
int N,M,S,D;
int mapp[510][510];     //邻接矩阵
int nums[510];          //节点消防员数目
int Dis[510];           //最短距离数组
bool used[510]={0};     //标志
int pre[510];           //前驱节点
int sum[510];           //走到节点i召集的消防员最大总数
int cnt[510];           //节点i同长路径数目
vector<int> path;
void dijkstra(int s)
{
    fill(Dis,Dis+N,INF);
    fill(used,used+N,false);
    fill(pre,pre+N,-1);
    Dis[s]=0;
    sum[s]=nums[s];
    cnt[s]=1;
    while(1)
    {
        int v=-1;
        //cout<<v<<endl;
        for(int u=0;u<N;u++)
        {
            if(!used[u]&&(v==-1||Dis[u]<Dis[v]))
                v=u;
        }
        if(v==-1)
            break;
        used[v]=true;
        for(int u=0;u<N;u++)
        {
            if(mapp[v][u]==INF)
                continue;
            if(Dis[u]>Dis[v]+mapp[v][u])
            {
                Dis[u]=Dis[v]+mapp[v][u];
                pre[u]=v;
                cnt[u]=cnt[v];
                sum[u]=sum[v]+nums[u];
            }
            else
            {
                if(Dis[u]==Dis[v]+mapp[v][u])
                {
                    cnt[u]+=cnt[v];
                    if(nums[u]+sum[v]>sum[u])
                    {
                        sum[u]=sum[v]+nums[u];
                        pre[u]=v;
                    }
                }
            }
        }
    }
    cout<<cnt[D]<<" "<<sum[D]<<endl;

    int k=D;
    while(k!=S)
    {
        path.push_back(k);
        k=pre[k];
    }
    path.push_back(k);
    reverse(path.begin(),path.end());
    for(int i=0;i<path.size();i++)
        {
            if(i!=0)
                printf(" ");
            printf("%d",path[i]);
        }
        cout<<endl;

}
int main()
{
    scanf("%d%d%d%d",&N,&M,&S,&D);
    for(int i=0;i<N;i++)
        for(int j=0;j<N;j++)
        mapp[i][j]=INF;
    for(int i=0;i<N;i++)
        scanf("%d",&nums[i]);
    for(int i=0;i<M;i++)
    {
        int x,y;
        scanf("%d%d",&x,&y);
        scanf("%d",&mapp[x][y]);
        mapp[y][x]=mapp[x][y];
    }

    dijkstra(S);
    return 0;
}

